{
  "data": [
    {
      "_id": "2d44d6c26138107f0ab0c1196d4e8f3c",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-8 的每日一题：<a href=\"https://leetcode-cn.com/problems/ipo/\" target=\"_blank\">「502. IPO」</a>\n\n## 1. 题目描述\n\n假设 力扣（LeetCode）即将开始 IPO 。为了以更高的价格将股票卖给风险投资公司，力扣 希望在 IPO 之前开展一些项目以增加其资本。 由于资源有限，它只能在 IPO 之前完成最多 k 个不同的项目。帮助 力扣 设计完成最多 k 个不同项目后得到最大总资本的方式。\n\n给你 n 个项目。对于每个项目 i ，它都有一个纯利润 profits[i] ，和启动该项目需要的最小资本 capital[i] 。\n\n最初，你的资本为 w 。当你完成一个项目时，你将获得纯利润，且利润将被添加到你的总资本中。\n\n总而言之，从给定项目中选择 最多 k 个不同项目的列表，以 最大化最终资本 ，并输出最终可获得的最多资本。\n\n答案保证在 32 位有符号整数范围内。\n\n\n\n**示例1：**\n\n```\n输入：k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\n输出：4\n解释：\n由于你的初始资本为 0，你仅可以从 0 号项目开始。\n在完成后，你将获得 1 的利润，你的总资本将变为 1。\n此时你可以选择开始 1 号或 2 号项目。\n由于你最多可以选择两个项目，所以你需要完成 2 号项目以获得最大的资本。\n因此，输出最后最大化的资本，为 0 + 1 + 3 = 4。\n```\n\n**示例2：**\n\n```\n输入：k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\n输出：6\n```\n\n## 2. 解答\n\n>贪心思想：每次投资的项目的纯利润要最大\n\n1. 先获得项目数组`arr`，将资本、利润按**项目号**组合\n2. 将项目按所需资本**从小到大**排序（若从大到小，可能一开始就没法投资了）\n3. 将所有满足条件的项目所获得的**利润**插入**最大堆**中\n4. 若堆不为空，取出堆顶，即为最大的纯利润，更新自己的资本`w`\n5. 若堆为空，直接退出循环，因为当前已经没有满足条件的项目进入堆了\n6. 重复步骤 3~5，一共执行`k`次\n7. 最后返回最终的资本`w`\n\n\n```javascript\n// 默认最大堆\nconst defaultCmp = (x, y) => x > y;\n// 交换元素\nconst swap = (arr, i, j) => ([arr[i], arr[j]] = [arr[j], arr[i]]);\n// 堆类，默认最大堆\nclass Heap {\n    constructor(cmp = defaultCmp) {\n        this.container = [];\n        this.cmp = cmp;\n    }\n    // 插入\n    insert(data) {\n        const { container, cmp } = this;\n        container.push(data);\n        let index = this.size() - 1;\n        while (index) {\n            let parent = (index - 1) >> 1;\n            if (!cmp(container[index], container[parent])) {\n                return;\n            }\n            swap(container, index, parent);\n            index = parent;\n        }\n    }\n    // 弹出堆顶，并返回\n    pop() {\n        const { container, cmp } = this;\n        if (!this.size()) {\n            return null;\n        }\n\n        swap(container, 0, this.size() - 1);\n        const res = container.pop();\n        const length = this.size();\n        let index = 0,\n            exchange = index * 2 + 1;\n\n        while (exchange < length) {\n            // // 以最大堆的情况来说：如果有右节点，并且右节点的值大于左节点的值\n            let right = index * 2 + 2;\n            if (right < length && cmp(container[right], container[exchange])) {\n                exchange = right;\n            }\n            if (!cmp(container[exchange], container[index])) {\n                break;\n            }\n            swap(container, exchange, index);\n            index = exchange;\n            exchange = index * 2 + 1;\n        }\n\n        return res;\n    }\n    // 获取堆大小\n    size() {\n        return this.container.length;\n    }\n}\n\nconst findMaximizedCapital = (k, w, profits, capital) => {\n    const n = profits.length;\n    const arr = new Array(n);\n    // 将资本、利润按项目号组合   [资本,纯利润]\n    for (let i = 0; i < n; i++) {\n        arr[i] = [capital[i], profits[i]];\n    }\n    // 将项目按所需资本从小到大排序\n    arr.sort((a, b) => a[0] - b[0]);\n\n    // 创建最大堆\n    const maxHeap = new Heap();\n    let cur = 0;\n    for (let i = 0; i < k; i++) {\n        while (cur < n && arr[cur][0] <= w) {\n            // 将所有满足条件的项目所获得的利润插入堆中\n            maxHeap.insert(arr[cur++][1]);\n        }\n        if (maxHeap.size()) {\n            // 堆不为空\n            // 取出堆顶，即为最大的纯利润，更新自己的资本w\n            w += maxHeap.pop();\n        } else {\n            // 堆为空，直接退出循环\n            // 因为已经没有满足条件的项目进入堆了\n            break;\n        }\n    }\n    return w;\n};\n```\n\n\n\n***\n\n😄最近新创建了个开源仓库，总结 LeetCode 的每日一题，目前已有 C++、JavaScript 语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1631064156000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」IPO",
      "titleEng": "lc-502",
      "url": "https://lzxjack.top/post?title=lc-502"
    },
    {
      "_id": "14139e126136babe0a4442292ba9b490",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-7 的每日一题：<a href=\"https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/\" target=\"_blank\">「1221. 分割平衡字符串」</a>\n\n## 1. 题目描述\n\n在一个 平衡字符串 中，`'L'`和`'R'`字符的数量是相同的。\n\n给你一个平衡字符串`s`，请你将它分割成尽可能多的平衡字符串。\n\n**注意**：分割得到的每个字符串都必须是平衡字符串。\n\n返回可以通过分割得到的平衡字符串的**最大数量**。\n\n\n\n**示例1：**\n\n```\n输入：s = \"RLRRLLRLRL\"\n输出：4\n解释：s 可以分割为 \"RL\"、\"RRLL\"、\"RL\"、\"RL\" ，每个子字符串中都包含相同数量的 'L' 和 'R' 。\n```\n\n**示例2：**\n\n```\n输入：s = \"RLLLLRRRLR\"\n输出：3\n解释：s 可以分割为 \"RL\"、\"LLLRRR\"、\"LR\" ，每个子字符串中都包含相同数量的 'L' 和 'R' 。\n```\n\n## 2. 解答\n\n> **贪心思想**：要使平衡字符串的数量最大，那么遍历中找到一个最短且满足条件的，就将其分隔，剩下的部分中继续遍历寻找。\n\n### 1. 比较L和R的数量\n\n1. 遍历字符串\n2. 比较`L`和`R`的数量\n3. 若`L`数量等于`R`且都不为`0`，那么找到了一个平衡字符串，将其纳入总数\n4. `L`和`R`数量置零，继续寻找\n\n\n```javascript\nconst balancedStringSplit = s => {\n    let res = 0;\n    let [numL, numR] = [0, 0];\n    const len = s.length;\n    for (let i = 0; i < len; i++) {\n        if (s[i] === 'L') {\n            numL++;\n        } else {\n            numR++;\n        }\n        if (numL && numL === numR) {\n            res++;\n            numL = 0;\n            numR = 0;\n        }\n    }\n    return res;\n};\n```\n\n### 2. 简化版本\n\n1. 用一个变量`d`计算`L`和`R`的差值\n2. 若`d`为`0`，则说明`L`和`R`数量相等，那么找到了一个平衡字符串，将其纳入总数\n3. 继续寻找\n\n```javascript\nconst balancedStringSplit = s => {\n    let [res, d] = [0, 0];\n    const len = s.length;\n    for (let i = 0; i < len; i++) {\n        d = s[i] === 'L' ? d + 1 : d - 1;\n        !d && res++;\n    }\n    return res;\n};\n```\n\n\n\n***\n\n😄最近新创建了个开源仓库，总结 LeetCode 的每日一题，目前已有 C++、JavaScript 语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1630976661000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」分割平衡字符串",
      "titleEng": "lc-1221",
      "url": "https://lzxjack.top/post?title=lc-1221"
    },
    {
      "_id": "14139e1261355b3409dcce7d752f86e7",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-6 的每日一题：<a href=\"https://leetcode-cn.com/problems/binary-search/\" target=\"_blank\">「704. 二分查找」</a>\n\n## 1. 题目描述\n\n给定一个`n`个元素有序的（升序）整型数组`nums`和一个目标值`target `，写一个函数搜索`nums`中的`target`，如果目标值存在返回下标，否则返回`-1`。\n\n**示例1：**\n\n```\n输入: nums = [-1,0,3,5,9,12], target = 9\n输出: 4\n解释: 9 出现在 nums 中并且下标为 4\n```\n\n**示例2：**\n\n```\n输入: nums = [-1,0,3,5,9,12], target = 2\n输出: -1\n解释: 2 不存在 nums 中因此返回 -1\n```\n\n## 2. 解答\n\n> 二分搜索经典例题。\n\n1. 定义左右两个索引\n2. 取得中间值\n3. 中间值大于目标值，说明在左边，需要更改右索引\n4. 中间值小于目标值，说明在右边，需要更改左索引\n5. 中间值等于目标值，直接返回中间值索引\n6. 遍历结束后，还没找到，返回`-1`\n\n\n```javascript\nconst search = (nums, target) => {\n    // 定义左右两个索引\n    let [low, high] = [0, nums.length - 1];\n    while (low <= high) {\n        // mid为中间索引\n        const mid = (low + high) >> 1;\n        // 中间值\n        const item = nums[mid];\n        if (item > target) {\n            // 中间值大于目标值，说明在左边\n            high = mid - 1;\n        } else if (item < target) {\n            // 中间值小于目标值，说明在右边\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return -1;\n};\n```\n\n\n\n***\n\n😄最近新创建了个开源仓库，总结 LeetCode 的每日一题，目前已有 C++、JavaScript 语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1630886673000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」二分查找",
      "titleEng": "lc-704",
      "url": "https://lzxjack.top/post?title=lc-704"
    },
    {
      "_id": "cd045e756132de200aa60f446e5755fb",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-4 的每日一题：<a href=\"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/\" target=\"_blank\">「剑指 Offer 10- I. 斐波那契数列」</a>\n\n## 1. 题目描述\n\n写一个函数，输入 `n` ，求斐波那契（Fibonacci）数列的第 `n` 项（即 `F(N)`）。斐波那契数列的定义如下：\n\n```\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n```\n\n斐波那契数列由`0`和`1`开始，之后的斐波那契数就是由之前的两数相加而得出。\n\n答案需要取模`1e9+7`（1000000007），如计算初始结果为：`1000000008`，请返回`1`。\n\n**示例1：**\n\n```\n输入：n = 2\n输出：1\n```\n\n**示例2：**\n\n```\n输入：n = 5\n输出：5\n```\n\n## 2. 解答\n\n> 这是一道**动态规划**经典例题，使用**动态规划**来解题。\n\n1. `dp[i]`含义：斐波那契数列的第`i`个数为`dp[i]`\n2. 递推公式：根据定义易得：`dp[i] = (dp[i - 1] + dp[i - 2])`\n3. dp数组初始化：题目已经给出：`dp = [0, 1]`\n4. 遍历顺序：根据定义，当前数依赖于前两个数，所以从前向后遍历\n5. 注意取模`（% 1000000007）`\n\n```javascript\nconst fib = n => {\n    const dp = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007;\n    }\n    return dp[n];\n};\n```\n\n\n\n***\n\n😄最近新创建了个开源仓库，总结LeetCode的每日一题，目前已有C++、JavaScript语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1630723561000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」斐波那契数列",
      "titleEng": "lc-o-10-1",
      "url": "https://lzxjack.top/post?title=lc-o-10-1"
    },
    {
      "_id": "2d44d6c2613174c409336ba610d066f8",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-3 的每日一题：<a href=\"https://leetcode-cn.com/problems/smallest-k-lcci/\" target=\"_blank\">「面试题 17.14. 最小K个数」</a>\n\n## 1. 题目描述\n\n设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。\n\n**示例**：\n\n```\n输入： arr = [1,3,5,7,2,4,6,8], k = 4\n输出： [1,2,3,4]\n```\n\n## 2. 解答\n\n### 1. 排序\n\n> 排序 + 返回前`k`个数。\n\n```javascript\nconst smallestK = (arr, k) => {\n    arr.sort((a, b) => a - b);\n    arr.length = k;\n    return arr;\n};\n```\n\n### 2. 堆排序\n\n> 将数组`arr`的数放入最小堆中，返回堆中前`k`个数。\n\n```javascript\n// 默认最大堆\nconst defaultCmp = (x, y) => x > y;\n// 交换元素\nconst swap = (arr, i, j) => ([arr[i], arr[j]] = [arr[j], arr[i]]);\n// 堆类，默认最大堆\nclass Heap {\n    constructor(cmp = defaultCmp) {\n        this.container = [];\n        this.cmp = cmp;\n    }\n    // 插入\n    insert(data) {\n        const { container, cmp } = this;\n        container.push(data);\n        let index = this.size() - 1;\n        while (index) {\n            let parent = (index - 1) >> 1;\n            if (!cmp(container[index], container[parent])) {\n                return;\n            }\n            swap(container, index, parent);\n            index = parent;\n        }\n    }\n    // 弹出堆顶，并返回\n    pop() {\n        const { container, cmp } = this;\n        if (!this.size()) {\n            return null;\n        }\n\n        swap(container, 0, this.size() - 1);\n        const res = container.pop();\n        const length = this.size();\n        let index = 0,\n            exchange = index * 2 + 1;\n\n        while (exchange < length) {\n            // // 以最大堆的情况来说：如果有右节点，并且右节点的值大于左节点的值\n            let right = index * 2 + 2;\n            if (right < length && cmp(container[right], container[exchange])) {\n                exchange = right;\n            }\n            if (!cmp(container[exchange], container[index])) {\n                break;\n            }\n            swap(container, exchange, index);\n            index = exchange;\n            exchange = index * 2 + 1;\n        }\n\n        return res;\n    }\n    // 获取堆大小\n    size() {\n        return this.container.length;\n    }\n    // 获取堆顶\n    peek() {\n        if (this.size()) return this.container[0];\n        return null;\n    }\n}\n\nconst smallestK = (arr, k) => {\n    const minHeap = new Heap((x, y) => x < y);\n    for (const num of arr) {\n        minHeap.insert(num);\n    }\n    const res = [];\n    for (let i = 0; i < k; i++) {\n        res.push(minHeap.pop());\n    }\n    return res;\n};\n```\n\n\n\n***\n\n😄最近新创建了个开源仓库，总结LeetCode的每日一题，目前已有C++、JavaScript语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1630631058000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」最小K个数",
      "titleEng": "lc-int-17-14",
      "url": "https://lzxjack.top/post?title=lc-int-17-14"
    },
    {
      "_id": "cd045e75613020c309bdbd2b01d261a6",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-2 的每日一题：<a href=\"https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/\" target=\"_blank\">「剑指 Offer 22. 链表中倒数第k个节点」</a>\n\n## 1. 题目描述\n\n输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。\n\n例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。\n\n**示例：**\n\n```\n给定一个链表: 1->2->3->4->5, 和 k = 2.\n\n返回链表 4->5.\n```\n\n## 2. 解答\n\n核心思路：\n\n1. 定义快慢指针，初始都指向**链表头部**\n2. **快指针**先走`k`步\n3. 再两指针一起走，直到**快指针**走到头为止\n4. 此时的**慢指针**指向的就是倒数第`k`个节点\n5. 返回**慢指针**即可\n\n**举例**：\n\n以官方示例为例：\n\n链表`1->2->3->4->5`，和`k = 2`。\n\n首先定义快慢指针，快指针先走`2`步。\n\n![](https://img.lzxjack.top:99/20210902084255.png)\n\n再两指针一起走，直到**快指针**走到头为止。\n\n![](https://img.lzxjack.top:99/20210902084317.png)\n\n此时的**慢指针**指向的就是倒数第`k`个节点。注意题目规定链表的尾节点是倒数第`1`个节点。\n\n```javascript\nconst getKthFromEnd = (head, k) => {\n    let fast, slow;\n    fast = slow = head;\n    while (k--) {\n        // 快指针先走k步\n        fast = fast.next;\n    }\n    while (fast) {\n        // 再一起走，直到快指针走到头\n        fast = fast.next;\n        slow = slow.next;\n    }\n    // 此时的慢指针指的就是倒数第k个\n    return slow;\n};\n```\n\n***\n\n😄最近新创建了个开源仓库，总结LeetCode的每日一题，目前已有C++、JavaScript语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1630544016000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」链表中倒数第k个节点",
      "titleEng": "lc-o-22",
      "url": "https://lzxjack.top/post?title=lc-o-22"
    },
    {
      "_id": "2d44d6c2612ed1ca086b95242c9c9519",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-1 的每日一题：<a href=\"https://leetcode-cn.com/problems/compare-version-numbers/\" target=\"_blank\">「165. 比较版本号」</a>\n\n## 1. 题目描述\n\n给你两个版本号 version1 和 version2 ，请你比较它们。\n\n版本号由一个或多个修订号组成，各修订号由一个 '.' 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。\n\n比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 忽略任何前导零后的整数值 。也就是说，修订号 1 和修订号 001 相等 。如果版本号没有指定某个下标处的修订号，则该修订号视为 0 。例如，版本 1.0 小于版本 1.1 ，因为它们下标为 0 的修订号相同，而下标为 1 的修订号分别为 0 和 1 ，0 < 1 。\n\n返回规则如下：\n\n- 如果 version1 > version2 返回 1\n- 如果 version1 < version2 返回 -1\n- 除此之外返回 0\n\n**示例 1：**\n\n```\n输入：version1 = \"1.01\", version2 = \"1.001\"\n输出：0\n解释：忽略前导零，\"01\" 和 \"001\" 都表示相同的整数 \"1\"\n```\n\n**示例 2：**\n\n```\n输入：version1 = \"1.0\", version2 = \"1.0.0\"\n输出：0\n解释：version1 没有指定下标为 2 的修订号，即视为 \"0\"\n```\n\n**示例 3：**\n\n```\n输入：version1 = \"0.1\", version2 = \"1.1\"\n输出：-1\n解释：version1 中下标为 0 的修订号是 \"0\"，version2 中下标为 0 的修订号是 \"1\" 。0 < 1，所以 version1 < version2\n```\n\n**示例 4：**\n\n```\n输入：version1 = \"1.0.1\", version2 = \"1\"\n输出：1\n```\n\n## 2. 解答\n\n1. 首先用`.`将两个版本号分割成为数组形式\n2. 遍历两个数组，数组元素逐个转化为`number`，若数组越界，则定义为`0`\n3. 按照题目要求返回\n\n```javascript\nconst compareVersion = (version1, version2) => {\n    // 使用'.'将版本号分割成为数组\n    const [v1, v2] = [version1.split('.'), version2.split('.')];\n    // 取两者长度的最大值\n    const len = Math.max(v1.length, v2.length);\n    for (let i = 0; i < len; i++) {\n        // 数组元素逐个转换成数字，比较大小\n        // 数组若越界，则定义为0\n        const num1 = v1[i] ? parseInt(v1[i]) : 0;\n        const num2 = v2[i] ? parseInt(v2[i]) : 0;\n        if (num1 > num2) {\n            return 1;\n        } else if (num1 < num2) {\n            return -1;\n        }\n    }\n    // 还没有返回，说明两者相等\n    return 0;\n};\n```\n\n\n\n***\n\n😄最近新创建了个开源仓库，总结LeetCode的每日一题，目前已有C++、JavaScript语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1630458262000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」比较版本号",
      "titleEng": "lc-165",
      "url": "https://lzxjack.top/post?title=lc-165"
    },
    {
      "_id": "8937eaa9612d8f0707444c6c54f5f1b8",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-8-31 的每日一题：<a href=\"https://leetcode-cn.com/problems/corporate-flight-bookings/\" target=\"_blank\">「1109. 航班预订统计」</a>\n\n## 1. 题目描述\n\n这里有`n`个航班，它们分别从`1`到`n`进行编号。\n\n有一份航班预订表`bookings`，表中第`i`条预订记录`bookings[i] = [firsti, lasti, seatsi]`意味着在从`firsti`到`lasti`（包含`firsti`和`lasti`）的**每个航班**上预订了`seatsi`个座位。\n\n请你返回一个长度为`n`的数组`answer`，其中`answer[i]`是航班`i`上预订的座位总数。\n\n**示例 1：**\n\n```\n输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\n输出：[10,55,45,25,25]\n解释：\n航班编号        1   2   3   4   5\n预订记录 1 ：   10  10\n预订记录 2 ：       20  20\n预订记录 3 ：       25  25  25  25\n总座位数：      10  55  45  25  25\n因此，answer = [10,55,45,25,25]\n```\n\n**示例 2：**\n\n```\n输入：bookings = [[1,2,10],[2,2,15]], n = 2\n输出：[10,25]\n解释：\n航班编号        1   2\n预订记录 1 ：   10  10\n预订记录 2 ：       15\n总座位数：      10  25\n因此，answer = [10,25]\n```\n\n## 2. 解答\n\n1. 预定表中的每一条记录是一个区间，表示区间内的值都有某个数\n2. 定义返回的数组`nums`\n3. 遍历预定表，取出每个记录的起点、终点、数量\n4. 因为起点是从1开始的，所以`nums`在`start - 1`处多`num`，在`end`处少`num`\n5. 最后对`nums`求前缀和，就可以把每个站点的数量表示出来了\n\n```javascript\nconst corpFlightBookings = (bookings, n) => {\n    const nums = new Array(n).fill(0);\n    for (const booking of bookings) {\n        // 取出起点、终点、数量\n        const [start, end, num] = booking;\n        // 因为起点从1开始，所以登机的数量在start - 1处多num\n        nums[start - 1] += num;\n        // 如果还没到终点站，在end处有num人下机\n        if (end < n) nums[end] -= num;\n    }\n    // 求前缀和\n    for (let i = 1; i < n; i++) {\n        nums[i] += nums[i - 1];\n    }\n    return nums;\n};\n```\n\n\n\n***\n\n😄最近新创建了个开源仓库，总结LeetCode的每日一题，目前已有C++、JavaScript语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1630375610000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」航班预订统计",
      "titleEng": "lc-1109",
      "url": "https://lzxjack.top/post?title=lc-1109"
    }
  ],
  "requestId": "0feeacee04436"
}
