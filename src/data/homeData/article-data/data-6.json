{
  "data": [
    {
      "_id": "1ac910326423139c001aa157545ed4b6",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "HTTP 学习记录",
      "content": "# 1. 状态码分类\n\n| 状态码 |                    说明                    |\n| :----: | :----------------------------------------: |\n|  1xx   |      指示信息 —— 请求已接收，继续处理      |\n|  2xx   |          成功 —— 请求已被成功接收          |\n|  3xx   | 重定向 —— 要完成请求必须进行更进一步的操作 |\n|  4xx   | 客户端错误 —— 请求有语法错误或请求无法实现 |\n|  5xx   |   服务端错误 —— 服务器未能实现合法的请求   |\n\n# 2. 常见状态码\n\n## 1. 1xx\n\n- 100 `Continue`\n\n  已收到请求，客户端应继续\n\n- 102 `Processing`\n\n  服务端正在处理请求，无响应可用\n\n## 2. 2xx\n\n- 200 `OK`\n\n  请求成功\n\n- 201 `Created`\n\n  请求成功，新资源已创建\n\n- 202 `Accepted`\n\n  请求已收到，但未响应\n\n## 3. 3xx\n\n- 300 `Multiple Choice`\n\n  提供一系列地址供客户端选择重定向\n\n- 301 `Moved Permanently`\n\n  **永久重定向**，默认可缓存，搜索引擎应更新链接\n\n- 302 `Found`\n\n  **临时重定向**，默认不缓存，除非显示指定\n\n- 303 `See Other`\n\n  临时重定向，必须GET请求\n\n## 4. 4xx\n\n- 400 `Bad Request`\n\n  请求语义或参数有误，不应重复请求\n\n- 401 `Unauthorized`\n\n  请求需身份验证或验证失败\n\n- 403  `Forbidden`\n\n  对被请求的页面访问被禁止\n\n- 404 `Not Found`\n\n  请求资源不存在\n\n- 405 `Method Not Allowed`\n\n  不允许的请求方法，并返回Allow允许的请求方法列表\n\n- 408 `Request Timeout`\n\n   请求超时\n\n- 410 `Gone`\n\n  资源已被永久移除\n\n## 5. 5xx\n\n- 500 `Internal Server Error`\n\n  服务端报错，通常是脚本错误\n\n- 501 `Not Implemented`\n\n  请求方法不被服务器支持\n\n- 502 `Bad Gateway`\n\n  网关无响应，通常是服务端环境配置错误\n\n- 503 `Service Unavailable`\n\n  请求未完成，服务器临时过载或宕机，一段时间后可能恢复正常\n\n- 505 `HTTP Version Not Supported`\n\n  请求的 HTTP 协议版本不被支持",
      "date": 1631674758000,
      "post": true,
      "tags": ["网络基础"],
      "title": "HTTP 常见的状态码",
      "titleEng": "http-code",
      "url": "https://lzxjack.top/post?title=http-code"
    },
    {
      "_id": "23b1deca6423139f001bfa6b416edc5c",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "HTTP 学习记录",
      "content": "# 1. 请求头\n\n|           请求头            |                     描述                      |                             示例                             |\n| :-------------------------: | :-------------------------------------------: | :----------------------------------------------------------: |\n|          `Accept`           |          用户代理支持的MIME类型列表           | `Accept: text/html,application/xhtml+xml,application/xml;q=0.9` |\n|      `Accept-Encoding`      |       用户代理支持的压缩方法（优先级）        |             `Accept-Encoding: br, gzip, deflate`             |\n|      `Accept-Language`      |         用户代理期望的语言（优先级）          |              `Accept-Language: zh-CN,zh;q=0.9`               |\n|       `Cache-Control`       |                   缓存机制                    |                  `Cache-Control: max-age=0`                  |\n|        `Connection`         |                 是否持久连接                  |                   `Connection: keep-alive`                   |\n|          `Cookie`           |                 HTTP cookies                  |         `服务器通过Set-Cookie存储到客户端的 Cookie`          |\n|           `Host`            |                主机名 + 端口号                |                    `Host: 127.0.0.1:8080`                    |\n|         `If-Match`          |              请求指定标识符资源               |    `If-Match: \"56a88df57772gt555gr5469a32ee75d65dcwq989\"`    |\n|     `If-Modified-Since`     |           请求指定时间修改过的资源            |      `If-Modified-Since: Wed, 19 Oct 2020 17:32:00 GMT`      |\n|       `If-None-Match`       |             请求非指定标识符资源              | `If-None-Match: \"56a88df57772gt555gr5469a32ee75d65dcwq989\"`  |\n| `Upgrade-Insecure-Requests` | 客户端优先接受加密和有身份验证的响应，支持CSP |                `Upgrade-Insecure-Requests: 1`                |\n|        `User-Agent`         |                   用户代理                    |                  `User-Agent:Safari/537.36`                  |\n|           `Vary`            |     缓存策略，常用于自适应缓存配置和 SEO      |                      `Vary: User-Agent`                      |\n\n# 2. 响应头\n\n|       响应头       |           描述           |                             示例                             |\n| :----------------: | :----------------------: | :----------------------------------------------------------: |\n|      `Allow`       |  服务器支持哪些请求方法  |                  `Allow: POST,GET,OPTIONS`                   |\n|  `Cache-Control`   |         缓存机制         |            `Cache-Control: public, max-age=3600`             |\n|    `Connection`    |       是否持久连接       |                   `Connection: keep-alive`                   |\n| `Content-Encoding` |       内容编码方式       |                    `Content-Encoding: br`                    |\n|   `Content-Type`   |      内容的MIME类型      |           `Content-Type: text/html; charset=UTF-8`           |\n|       `Date`       |       报文创建时间       |            `Date: Sun, 28 Feb 2021 11:52:51 GMT`             |\n|     `Expires`      |       资源过期时间       |           `Expires: Sun, 28 Feb 2021 12:52:51 GMT`           |\n|       `ETag`       |        资源标识符        |      `ETag: \"56a88df57772gt555gr5469a32ee75d65dcwq989\"`      |\n|    `Set-Cookie`    | 服务端向客户端发送Cookie | `Set-Cookie: token=6e204d9b-103a-431e-b8de-ba97b2d1; path=/; HttpOnly` |\n\n",
      "date": 1631670175000,
      "post": true,
      "tags": ["网络基础"],
      "title": "常见的HTTP请求头和响应头",
      "titleEng": "http-header",
      "url": "https://lzxjack.top/post?title=http-header"
    },
    {
      "_id": "14139e12614144610c59eb6153f6cbf9",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-15 的每日一题：<a href=\"https://leetcode-cn.com/problems/find-peak-element/\" target=\"_blank\">「162. 寻找峰值」</a>\n\n## 1. 题目描述\n\n峰值元素是指其值严格大于左右相邻值的元素。\n\n给你一个整数数组`nums`，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回**任何一个峰值**所在位置即可。\n\n你可以假设`nums[-1] = nums[n] = -∞`。\n\n你必须实现时间复杂度为`O(log n)`的算法来解决此问题。\n\n\n\n**示例1：**\n\n```\n输入：nums = [1,2,3,1]\n输出：2\n解释：3 是峰值元素，你的函数应该返回其索引 2。\n```\n\n**示例2：**\n\n```\n输入：nums = [1,2,1,3,5,6,4]\n输出：1 或 5 \n解释：你的函数可以返回索引 1，其峰值元素为 2；\n     或者返回索引 5， 其峰值元素为 6。\n```\n\n## 2. 解答\n\n1. 返回任意的峰值索引，用二分法\n2. 取中间元素`mid`,若`nums[mid] > nums[mid + 1]`，说明`mid`在下降的一小段中，峰值肯定在`mid`左边，同时`mid`也有可能是峰值，所以丢弃`mid`右边的，让`right=mid`\n3. 若`nums[mid] <= nums[mid + 1]`，`mid`在上升的一小段中，峰值肯定在`mid`右边，`mid`不可能是峰值，丢弃左边的元素，令`left = mid + 1`\n4. 当`left < right`时，不断循环\n5. 注意，我这里不能写`left <= right`，比如`[2,1]`，会无限循环\n\n\n```javascript\nconst findPeakElement = nums => {\n    let [left, right] = [0, nums.length - 1];\n    while (left < right) {\n        const mid = (left + right) >> 1;\n        if (nums[mid] > nums[mid + 1]) {\n            // 下降\n            right = mid;\n        } else {\n            // 上升\n            left = mid + 1;\n        }\n    }\n    return left;\n};\n```\n\n\n\n***\n\n😄最近新创建了个开源仓库，总结 LeetCode 的每日一题，目前已有 C++、JavaScript 语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1631667266000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」寻找峰值",
      "titleEng": "lc-162",
      "url": "https://lzxjack.top/post?title=lc-162"
    },
    {
      "_id": "2cc84e26642313a2067fb7db273bf732",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "HTTP 学习记录",
      "content": "# 1. 常用的HTTP方法\n\n常用的HTTP方法包括：\n\n- `GET`：请求资源\n- `POST`：发送数据，主体类型由`Content-Type`指定\n- `PUT`：更新资源，不变的字段也重写一遍\n- `DELETE`：删除资源\n- `HEAD`：获得报文头部，常用来测试链接的有效性\n- `CONNECT`：创建点到点沟通隧道\n- `OPTIONS`：了解服务器的性能，检测服务端支持方法\n- `TRACE`：消息环回测试，多用于路由检测\n- `PATCH`：更新修改资源，可单独修改指定的字段\n\n# 2. GET和POST的区别\n\n|              |                    `GET`                    |                 `POST`                 |\n| :----------: | :-----------------------------------------: | :------------------------------------: |\n|  浏览器回退  |            **不会**重新发送请求             |              重新发送请求              |\n|  浏览器缓存  |                  主动缓存                   |     **不会**主动缓存，除非手动设置     |\n|     参数     | 参数暴露在URL、会完整保留在浏览器历史记录里 | 参数放在请求体中、**不会**被浏览器保留 |\n| 参数大小限制 |                 有长度限制                  |                 无限制                 |\n| 参数数据类型 |               只接受ASCII字符               |                 无限制                 |\n|     编码     |                 只能URL编码                 |              多种编码方式              |\n\n",
      "date": 1631586521000,
      "post": true,
      "tags": ["网络基础"],
      "title": "HTTP的常用方法、GET和POST的区别",
      "titleEng": "http-method",
      "url": "https://lzxjack.top/post?title=http-method"
    },
    {
      "_id": "23b1deca642313a6001bfaac7fe4ff72",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "HTTP 学习记录",
      "content": "# 1. HTTP定义\n\n`HTTP`全称`Hypertext Transfer Protocol`，**超文本传输协议**，是**应用层协议**，由从客户端到服务器的**请求**和从服务器到客户端的**响应**构成。\n\n# 2. HTTP协议的主要特点\n\n## 1. 简单快速\n\n简单：\n\n-   每种资源（图片、页面）都通过固定的`url`来定位。在`HTTP`协议中，处理起来比较简单，访问资源时，直接输入相应`url`即可。\n\n快速：\n\n-   由于`HTTP`协议简单，使得`HTTP`服务器的**程序规模小**，因而**通信速度很快**。\n\n## 2. 灵活\n\n`HTTP`允许传输**任意类型**的数据对象。正在传输的类型由`Content-Type`加以标记。\n\n## 3. 无连接\n\n无连接的含义是**限制每次连接只处理一个请求**。服务器处理完客户的请求，并收到客户的应答后，即**断开连接**。采用这种方式可以节省传输时间。\n\n## 4. 无状态\n\n无状态是指协议对于事务处理**没有记忆能力**。无状态意味着如果后续处理需要前面的信息，则它必须**重传**，这样可能导致每次连接传送的数据量增大。\n\n例如，**客户端**和**服务器端**是两种身份。第一次请求结束后，就断开了，第二次请求时，**服务器端并没有记住之前的状态**，也就是说，服务器端无法区分客户端是否为同一个人、同一个身份。\n\n另一方面，在服务器不需要先前信息时它的应答就较快。\n\n> 有时，网站能记住我们的登录状态，从而免登陆，这并不是`HTTP`协议的功劳，而是其他手段（例如`session`）。\n\n# 3. HTTP报文的组成部分\n\n`HTTP`报文包括**请求报文**和**响应报文**。\n\n## 1. 请求报文\n\n![](https://img.lzxjack.top:99/20210913103949.png)\n\n**请求报文**由四个部分组成：\n\n-   请求行：包括请求方法、请求 URL、HTTP 协议和版本\n-   请求头：一些**键值对**\n-   空行：请求头之后是一个空行，通知服务器以下不再有请求头、空行后面的内容是请求体\n-   请求体：数据部分，`GET`没有请求数据，`POST`有\n\n一个简单的示例：\n\n![](https://img.lzxjack.top:99/20210914090845.jpeg)\n\n## 2. 响应报文\n\n![](https://img.lzxjack.top:99/20210913105759.png)\n\n**响应报文**由四个部分组成：\n\n-   状态行：`HTTP`协议和版本、状态码、状态描述\n-   响应头\n-   空行\n-   响应体\n\n一个简单的示例：\n\n![](https://img.lzxjack.top:99/20210913105848.jpeg)\n\n\n",
      "date": 1631581626000,
      "post": true,
      "tags": ["网络基础"],
      "title": "HTTP协议的特点、HTTP报文的组成部分",
      "titleEng": "http-basic",
      "url": "https://lzxjack.top/post?title=http-basic"
    },
    {
      "_id": "2d44d6c2613ff4270c1c11812431a5ff",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-14 的每日一题：<a href=\"https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/\" target=\"_blank\">「524. 通过删除字母匹配到字典里最长单词」</a>\n\n## 1. 题目描述\n\n给你一个字符串 s 和一个字符串数组 dictionary 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。\n\n如果答案不止一个，返回长度最长且字典序最小的字符串。如果答案不存在，则返回空字符串。\n\n\n\n**示例1：**\n\n```\n输入：s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n输出：\"apple\"\n```\n\n**示例2：**\n\n```\n输入：s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\n输出：\"a\"\n```\n\n\n\n## 2. 解答\n\n1. 按照字符串长度降序、字典序先将字典排序\n2. 在字典中逐个检验字符串是否满足条件\n3. 检验时，用双指针遍历来判断\n\n```javascript\nconst findLongestWord = (s, dictionary) => {\n    // 按照字符串长度降序、字典序排序\n    dictionary.sort((a, b) => (a.length === b.length ? a.localeCompare(b) : b.length - a.length));\n    const lenS = s.length;\n\n    for (const word of dictionary) {\n        // 两个指针\n        let [S, W] = [0, 0];\n        const lenW = word.length;\n        while (S < lenS && W < lenW) {\n            if (s[S] === word[W]) W++;\n            S++;\n        }\n        // W指针走到头说明word匹配完成\n        if (W === lenW) return word;\n    }\n    return '';\n};\n```\n\n***\n\n😄最近新创建了个开源仓库，总结 LeetCode 的每日一题，目前已有 C++、JavaScript 语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1631581194000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」通过删除字母匹配到字典里最长单词",
      "titleEng": "lc-524",
      "url": "https://lzxjack.top/post?title=lc-524"
    },
    {
      "_id": "2d44d6c2613eaa390bdec81b135aedfb",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-13 的每日一题：<a href=\"https://leetcode-cn.com/problems/number-of-boomerangs/\" target=\"_blank\">「447. 回旋镖的数量」</a>\n\n## 1. 题目描述\n\n给定平面上`n`对**互不相同**的点`points`，其中`points[i] = [xi, yi]`。**回旋镖**是由点`(i, j, k)`表示的元组 ，其中`i`和`j`之间的距离和`i`和`k`之间的距离相等（**需要考虑元组的顺序**）。\n\n返回平面上所有回旋镖的数量。\n\n\n\n\n**示例1：**\n\n```\n输入：points = [[0,0],[1,0],[2,0]]\n输出：2\n解释：两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]]\n```\n\n**示例2：**\n\n```\n输入：points = [[1,1],[2,2],[3,3]]\n输出：2\n```\n\n**示例 3:**\n\n```\n输入：points = [[1,1]]\n输出：0\n```\n\n\n\n## 2. 解答\n\n1. 遍历`points`，将每个点作为**顶点**，计算其他点到顶点的距离，保存相同距离点的**数量**在`map`中\n2. 遍历每个`map`，若与顶点相同距离的点的个数大于1，则计算组成回旋镖的数量\n3. 一共`num`，其中挑2个出来，有`num*(num-1)`个可能\n\n```javascript\n// 计算两点距离的平方\nconst getD = ([a1, a2], [b1, b2]) => (b1 - a1) ** 2 + (b2 - a2) ** 2;\n\nconst numberOfBoomerangs = points => {\n    if (points.length < 3) return 0;\n\n    const map = {};\n    let res = 0;\n\n    points.forEach((a, i) => {\n        // 遍历时，将每个点作为顶点\n        map[a] = {};\n        // 再次遍历，得到其余的点到顶点的距离\n        points.forEach((b, j) => {\n            // 排除与自身的点\n            if (i !== j) {\n                // 计算距离\n                const d = getD(a, b);\n                // 将距离保存\n                map[a][d] = (map[a][d] || 0) + 1;\n            }\n        });\n        // 遍历顶点map\n        for (const item in map[a]) {\n            // 与顶点相同距离的点的个数\n            const num = map[a][item];\n            // num>1，才能和顶点组成回旋镖\n            // 一共num，其中挑2个出来，有num*(num-1)个可能\n            if (num > 1) res += num * (num - 1);\n        }\n    });\n\n    return res;\n};\n```\n\n***\n\n😄最近新创建了个开源仓库，总结 LeetCode 的每日一题，目前已有 C++、JavaScript 语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1631496706000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」回旋镖的数量",
      "titleEng": "lc-447",
      "url": "https://lzxjack.top/post?title=lc-447"
    },
    {
      "_id": "cd045e75613ab69b0c9219062441f3f9",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "LeetCode 题解",
      "content": "> 这是 LeetCode 上 2021-9-10 的每日一题：<a href=\"https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/\" target=\"_blank\">「1894. 找到需要补充粉笔的学生编号」</a>\n\n## 1. 题目描述\n\n一个班级里有 n 个学生，编号为 0 到 n - 1 。每个学生会依次回答问题，编号为 0 的学生先回答，然后是编号为 1 的学生，以此类推，直到编号为 n - 1 的学生，然后老师会重复这个过程，重新从编号为 0 的学生开始回答问题。\n\n给你一个长度为 n 且下标从 0 开始的整数数组 chalk 和一个整数 k 。一开始粉笔盒里总共有 k 支粉笔。当编号为 i 的学生回答问题时，他会消耗 chalk[i] 支粉笔。如果剩余粉笔数量 严格小于 chalk[i] ，那么学生 i 需要 补充 粉笔。\n\n请你返回需要 补充 粉笔的学生 编号 。\n\n**示例1：**\n\n```\n输入：chalk = [5,1,5], k = 22\n输出：0\n解释：学生消耗粉笔情况如下：\n- 编号为 0 的学生使用 5 支粉笔，然后 k = 17 。\n- 编号为 1 的学生使用 1 支粉笔，然后 k = 16 。\n- 编号为 2 的学生使用 5 支粉笔，然后 k = 11 。\n- 编号为 0 的学生使用 5 支粉笔，然后 k = 6 。\n- 编号为 1 的学生使用 1 支粉笔，然后 k = 5 。\n- 编号为 2 的学生使用 5 支粉笔，然后 k = 0 。\n编号为 0 的学生没有足够的粉笔，所以他需要补充粉笔。\n```\n\n**示例2：**\n\n```\n输入：chalk = [3,4,1,2], k = 25\n输出：1\n解释：学生消耗粉笔情况如下：\n- 编号为 0 的学生使用 3 支粉笔，然后 k = 22 。\n- 编号为 1 的学生使用 4 支粉笔，然后 k = 18 。\n- 编号为 2 的学生使用 1 支粉笔，然后 k = 17 。\n- 编号为 3 的学生使用 2 支粉笔，然后 k = 15 。\n- 编号为 0 的学生使用 3 支粉笔，然后 k = 12 。\n- 编号为 1 的学生使用 4 支粉笔，然后 k = 8 。\n- 编号为 2 的学生使用 1 支粉笔，然后 k = 7 。\n- 编号为 3 的学生使用 2 支粉笔，然后 k = 5 。\n- 编号为 0 的学生使用 3 支粉笔，然后 k = 2 。\n编号为 1 的学生没有足够的粉笔，所以他需要补充粉笔。\n```\n\n## 2. 解答\n\n1. 先求出一轮中，所要消耗的粉笔数量总和\n2. 对`k`取模，得到的`k`是经过若干轮次后，剩下的粉笔数量\n3. 再重新遍历一次学生，一定会有人粉笔不足\n\n```javascript\nconst chalkReplacer = (chalk, k) => {\n    const sum = chalk.reduce((a, b) => a + b);\n    k %= sum;\n    const len = chalk.length;\n    let sumNew = 0;\n    for (let i = 0; i < len; i++) {\n        sumNew += chalk[i];\n        if (sumNew > k) return i;\n    }\n};\n```\n\n***\n\n😄最近新创建了个开源仓库，总结 LeetCode 的每日一题，目前已有 C++、JavaScript 语言版本，欢迎大家提供其他语言版本！\n\n🖥️仓库地址：<a href=\"https://github.com/HDU-Coder-X/Daily-question-of-Leetcode\" target=\"_blank\">「每日一题系列」</a>",
      "date": 1631237725000,
      "post": true,
      "tags": ["JavaScript", "LeetCode"],
      "title": "「每日一题」找到需要补充粉笔的学生编号",
      "titleEng": "lc-1894",
      "url": "https://lzxjack.top/post?title=lc-1894"
    }
  ],
  "requestId": "8c5a4de95da51"
}
