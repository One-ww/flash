{
  "data": [
    {
      "_id": "8937eaa961262ec30644c7a92a1fdf32",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "JavaScript 数据结构与算法",
      "content": "## 1. 概念\n\n字典也是一种存储**唯一值**的数据结构，但它是以**键值对**的形式来存储。\n\n字典的常用操作：增、删、改、查。\n\n## 2. 实现\n\nJavaScript 中可用`Map()`表示字典：\n\n```javascript\nconst m = new Map();\n\n// 增\nm.set('a', 'aaa');\nm.set('b', 'bbb');\nm.set('c', 'ccc');\n// Map(3) { 'a' => 'aaa', 'b' => 'bbb', 'c' => 'ccc' }\n\n// 删\nm.delete('b');\n// Map(2) { 'a' => 'aaa', 'c' => 'ccc' }\nm.clear();\n// Map(0) {}\n\n// 改\nm.set('a', 'aaa');\nm.set('b', 'bbb');\nm.set('a', '11111');\n// Map(2) { 'a' => '11111', 'b' => 'bbb' }\n\n// 查\nconsole.log(m.get('a'));\n// 11111\n```\n\n\n",
      "date": 1615607450000,
      "post": true,
      "tags": ["JavaScript", "数据结构"],
      "title": "JavaScript 数据结构 —— 字典",
      "titleEng": "map"
    },
    {
      "_id": "8937eaa961262e590644b4fb569f895b",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "JavaScript 数据结构与算法",
      "content": "## 1. 概念\n\n链表是多个元素组成的列表，元素存储**不连续**， 用`next`指针连在一起。\n\n![](https://img.lzxjack.top:99/20210313203615.png)\n\n## 2. 实现\n\n在 JavaScript 中可以用`Object`模拟链表：\n\n```javascript\nconst a = { val: 'a' };\nconst b = { val: 'b' };\nconst c = { val: 'c' };\nconst d = { val: 'd' };\na.next = b;\nb.next = c;\nc.next = d;\n\n// 遍历链表\nlet p = a; // 声明指针 指向链表头部\nwhile (p) {\n    console.log(p.val);\n    p = p.next;\n}\n\n// 插入(c、d之间插入e)\nconst e = { val: 'e' };\nc.next = e;\ne.next = d;\n\n// 删除e\nc.next = d;\n```\n\n\n",
      "date": 1615603721000,
      "post": true,
      "tags": ["JavaScript", "数据结构"],
      "title": "JavaScript 数据结构 —— 链表",
      "titleEng": "linked-list"
    },
    {
      "_id": "14139e126124f48706ba59ca7cd613bc",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "JavaScript 常见问题",
      "content": "## 问题及原因\n\n在 JavaScript 中，如果判断`0.1 + 0.2 === 0.3`，结果是`false`，就像这样：\n\n```javascript\nconsole.log(0.1 + 0.2 === 0.3); // false\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n```\n\n这是怎么回事呢？`0.1 + 0.2`竟然不等于`0.3`？是程序出问题了吗？\n\n原来 JavaScript 采用的是`IEEE754的64位双精度`版本，由三部分组成：\n\n- 1 位数符：标记正负，0 为正，1 为负\n- 11 位阶码：数字的整数部分\n- 52 位尾数：数字的小数部分\n\n`0.1`的二进制表示为：\n\n```javascript\n0.1 = 0.0(0011)(0011)(0011)(0011)(0011)....\n```\n\n是无限循环小数，而在 JavaScript 中只能存储 52 位小数，那么`0.1`的小数位在第 52 位时就需要判读进位（第 53 位为 1 就+1，为 0 则不进位），则`0.1`在 JavaScript 中存储的实际为：\n\n```javascript\n0.1 = 0.0(0011)(0011)...(0011)010\n```\n\n第 52 位进位了。\n\n同理`0.2`在 JavaScript 中存储的为：\n\n```javascript\n0.2 = 0.(0011)(0011)...(0011)\n```\n\n不需要进位。\n\n那么将`0.1`和`0.2`在 JavaScript 中存储的表示值相加得到：\n\n```javascript\n0.000110011001100110011001100110011001100110011001101 + 0.0011001100110011001100110011001100110011001100110011;\n-----------------------------------------------------------0.0100110011001100110011001100110011001100110011001101;\n```\n\n`0.0100110011001100110011001100110011001100110011001101`这个**二进制**数刚好等于**十进制**的`0.30000000000000004`：\n\n![](https://img.lzxjack.top:99/20210313095537.png)\n\n这样看来，程序并没有出问题，这是由于浮点数精度问题造成的，不仅是 JavaScript，所有采用`IEEE754的64位双精度`的语言都是如此。\n\n## 解决办法\n\n在 JavaScript 中，可用`Number.EPSILON`解决。\n\n`Number.EPSILON`表示`1`与`Number`可表示的大于`1`的**最小的浮点数**之间的差值。\n\n`Number.EPSILON`的值为`2^-52`。\n\n判断方法：\n\n```javascript\nconst num = 0.1 + 0.2;\nconsole.log(num - 0.3 <= Number.EPSILON); // true\n```\n\n\n",
      "date": 1615601720000,
      "post": true,
      "tags": ["JavaScript"],
      "title": "JavaScript中为什么0.1+0.2!=0.3？附解决办法！",
      "titleEng": "float"
    },
    {
      "_id": "0122a587642313e80680c9bb1e20162d",
      "_openid": "dbee9976b3c14448a06f2006a4795cf2",
      "classes": "前端基础",
      "content": "# 1. webpack概述\n\n`webpack`是一个流行的**前端项目构建工具**（打包工具），可以解决当前`web`开发中所面临的困境。`webpack`提供了**友好的模块化支持**，以及**代码压缩混淆**、**处理`js`兼容问题**、**性能优化**等强大的功能，从而让程序员把工作的重心放到具体的功能实现上，提高了**开发效率**和项目的**可维护性**。\n\n![](https://img.lzxjack.top:99/20201210200331.png)\n\n# 2. webpack基本使用\n\n## 1. 创建列表隔行变色案例\n\n1. 新建项目空白目录，并运行`npm init –y`命令，初始化包管理配置文件`package.json`\n2. 新建`src`源代码目录\n3. 新建`src -> index.html`首页\n4. 初始化首页基本的结构\n5. 运行`npm install jquery –S`命令，安装`jQuery`\n6. 通过模块化的形式，实现列表隔行变色效果\n\n## 2. 在项目中安装和配置webpack\n\n1. 运行`npm install webpack webpack-cli –D`命令，安装`webpack`相关的包\n2. 在项目根目录中，创建名为`webpack.config.js`的`webpack`配置文件\n3. 在`webpack`的配置文件中，初始化如下基本配置：\n\n```javascript\nmodule.exports = {\n    mode: 'development', // mode 用来指定构建模式\n};\n```\n\n4. 在`package.json`配置文件中的`scripts`节点下，新增`dev`脚本如下：\n\n```json\n\"scripts\": {\n    \"dev\": \"webpack\" // script 节点下的脚本，可以通过 npm run 执行\n}\n```\n\n5. 在终端中运行`npm run dev`命令，启动`webpack`进行项目打包\n\n## 3. 配置打包的入口与出口\n\n`webpack`的 4.x 版本中默认约定：\n\n-   打包的**入口文件**为 `src -> index.js`\n-   打包的**输出文件**为 `dist -> main.js`\n\n如果要修改打包的入口与出口，可以在`webpack.config.js`中新增如下配置信息：\n\n```javascript\nconst path = require('path'); // 导入 node.js 中专门操作路径的模块\nmodule.exports = {\n    entry: path.join(__dirname, './src/index.js'), // 打包入口文件的路径\n    output: {\n        path: path.join(__dirname, './dist'), // 输出文件的存放路径\n        filename: 'bundle.js', // 输出文件的名称\n    },\n};\n```\n\n## 4. 配置webpack的自动打包功能\n\n1. 运行`npm install webpack-dev-server –D`命令，安装支持项目自动打包的工具\n2. 修改`package.json -> scripts`中的`dev`命令如下：\n\n```json\n\"scripts\": {\n    \"dev\": \"webpack-dev-server\" // script 节点下的脚本，可以通过 npm run 执行\n}\n```\n\n3. 将`src -> index.html`中，`script`脚本的引用路径，修改为`\"/buldle.js“ `\n4. 运行`npm run dev`命令，重新进行打包\n5. 在浏览器中访问`http://localhost:8080`地址，查看自动打包效果\n\n**注意**：\n\n-   `webpack-dev-server`会启动一个实时打包的`http`服务器\n-   `webpack-dev-server`打包生成的输出文件，默认放到了项目根目录中，而且是虚拟的、看不见的\n\n## 5. 配置html-webpack-plugin生成预览页面\n\n1. 运行`npm install html-webpack-plugin –D`命令，安装生成预览页面的插件\n2. 修改`webpack.config.js`文件头部区域，添加如下配置信息：\n\n```javascript\n// 导入生成预览页面的插件，得到一个构造函数\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst htmlPlugin = new HtmlWebpackPlugin({\n    // 创建插件的实例对象\n    template: './src/index.html', // 指定要用到的模板文件\n    filename: 'index.html', // 指定生成的文件的名称，该文件存在于内存中，在目录中不显示\n});\n```\n\n3. 修改`webpack.config.js`文件中向外暴露的配置对象，新增如下配置节点：\n\n```javascript\nmodule.exports = {\n    plugins: [htmlPlugin], // plugins 数组是 webpack 打包期间会用到的一些插件列表\n};\n```\n\n## 6. 配置自动打包相关的参数\n\n```json\n // package.json中的配置\n // --open 打包完成后自动打开浏览器页面\n // --host 配置 IP 地址\n // --port 配置端口\n \"scripts\": {\n     \"dev\": \"webpack-dev-server --open --host 127.0.0.1 --port 8888\"\n },\n```\n\n# 3. webpack中的加载器\n\n## 1. 通过loader打包非JS模块\n\n在实际开发过程中，`webpack`默认只能打包处理以`.js`后缀名结尾的模块，其他非`.js`后缀名结 尾的模块，`webpack`默认处理不了，需要调用`loader`加载器才可以正常打包，否则会报错！\n\n`loader`加载器可以协助`webpack`打包处理特定的文件模块，比如：\n\n-   `less-loader`可以打包处理`.less`相关的文件\n-   `sass-loader`可以打包处理`.scss`相关的文件\n-   `url-loader`可以打包处理`css`中与`url`路径相关的文件\n\n## 2. loader的调用过程\n\n![](https://img.lzxjack.top:99/20201210202453.png)\n\n## 3. webpack中加载器的基本使用\n\n### 1. 打包处理css文件\n\n1. 运行`npm i style-loader css-loader -D`命令，安装处理`css 文件的 loader`\n2. 在`webpack.config.js`的`module -> rules`数组中，添加`loader`规则如下：\n\n```json\n// 所有第三方文件模块的匹配规则\nmodule: {\n    rules: [\n        { test: /\\.css$/, use: ['style-loader', 'css-loader'] }\n    ]\n}\n```\n\n其中，`test`表示匹配的文件类型，`use`表示对应要调用的`loader`，**从后往前**执行\n\n**注意**：\n\n-   `use`数组中指定的`loader`顺序是固定的\n-   多个`loader`的调用顺序是：**从后往前**调用\n\n### 2. 打包处理less文件\n\n1. 运行`npm i less-loader less -D`命令\n2. 在`webpack.config.js`的`module -> rules`数组中，添加`loader`规则如下：\n\n```json\n // 所有第三方文件模块的匹配规则\n module: {\n     rules: [\n         { test: /\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] }\n     ]\n }\n```\n\n### 3. 打包处理scss文件\n\n1. 运行`npm i sass-loader node-sass -D`命令\n2. 在`webpack.config.js`的`module -> rules`数组中，添加`loader`规则如下：\n\n```json\n // 所有第三方文件模块的匹配规则\n module: {\n     rules: [\n         { test: /\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] }\n     ]\n }\n```\n\n### 4. 配置postCSS自动添加css的兼容前缀\n\n1. 运行`npm i postcss-loader autoprefixer -D`命令\n2. 在项目根目录中创建`postcss`的配置文件`postcss.config.js`，并初始化如下配置：\n\n```javascript\nconst autoprefixer = require('autoprefixer'); // 导入自动添加前缀的插件\nmodule.exports = {\n    plugins: [autoprefixer], // 挂载插件\n};\n```\n\n3. 在`webpack.config.js`的`module -> rules`数组中，修改`css`的`loader`规则如下：\n\n```javascript\nmodule: {\n    rules: [{ test: /\\.css$/, use: ['style-loader', 'css-loader', 'postcss-loader'] }];\n}\n```\n\n### 5. 打包样式表中的图片和字体文件\n\n1. 运行`npm i url-loader file-loader -D`命令\n2. 在`webpack.config.js`的`module -> rules`数组中，添加`loader`规则如下：\n\n```json\nmodule: {\n    rules: [{\n        test: /\\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/,\n        use: 'url-loader?limit=16940'\n    }]\n}\n```\n\n**注意**：\n\n-   其中`?`之后的是`loader`的参数项\n-   `limit`用来指定图片的大小，单位是字节(`byte`),只有小于`limit`大小的图片，才会被转为`base64`图片\n\n### 6. 打包处理JS文件中的高级语法\n\n1. 安装`babel`转换器相关的包：`npm i babel-loader @babel/core @babel/runtime -D`\n2. 安装`babel`语法插件相关的包：`npm i @babel/preset-env @babel/plugin-transformruntime @babel/plugin-proposal-class-properties –D`\n3. 在项目根目录中，创建`babel`配置文件`babel.config.js`并初始化基本配置如下：\n\n```javascript\nmodule.exports = {\n    presets: ['@babel/preset-env'],\n    plugins: ['@babel/plugin-transform-runtime', '@babel/plugin-proposalclass-properties'],\n};\n```\n\n4. 在`webpack.config.js`的`module -> rules`数组中，添加`loader`规则如下：\n\n```javascript\n// exclude 为排除项，表示 babel-loader 不需要处理 node_modules 中的 js 文件\n{ test: /\\.js$/, use: 'babel-loader', exclude: /node_modules/ }\n```\n\n\n",
      "date": 1609641200000,
      "post": true,
      "tags": ["Webpack"],
      "title": "初学 Webpack 相关配置",
      "titleEng": "webpack"
    },
    {
      "_id": "cd045e75612639a907b9b7e05c8ac22f",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "前端基础",
      "content": "## 1. ES6模块化（大一统的模块化规范）\n\n在`ES6`模块化规范诞生之前，`Javascript`社区已经尝试并提出了`AMD`、`CMD`、`CommonJS`等模块化规范。\n\n但是，这些社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块化标准，例如：\n\n-   `AMD`和`CMD`适用于浏览器端的`Javascript`模块化\n\n-   `CommonJS`适用于服务器端的`Javascript`模块化\n\n因此，`ES6`语法规范中，在语言层面上定义了`ES6`模块化规范，是**浏览器端**与**服务器端**通用的模块化开发规范。\n\n`ES6`模块化规范中定义：\n\n-   每个`js`文件都是一个**独立的模块**\n-   **导入模块成员**使用`import`关键字\n-   **暴露模块成员**使用`export`关键字\n\n## 2. ES6模块化的基本语法\n\n### 1. 默认导出、默认导入\n\n-   默认导出语法：`export default 默认导出的成员`\n-   默认导入语法：`import 接收名称 from 模块标识符`\n\n```javascript\n// 当前文件模块为 m1.js\n\n// 定义私有成员 a 和 c\nlet a = 10;\nlet c = 20;\n// 外界访问不到变量 d ,因为它没有被暴露出去\nlet d = 30;\n\nfunction show() {}\n// 将本模块中的私有成员暴露出去，供其它模块使用\nexport default {\n    a,\n    c,\n    show,\n};\n```\n\n```javascript\n// 导入模块成员\nimport m1 from './m1.js';\n\nconsole.log(m1);\n// 打印输出的结果为：\n// { a: 10, c: 20, show: [Function: show] }\n```\n\n**注意**：每个模块中，只允许使用唯一的一次`export default`，否则会报错！\n\n### 2. 按需导出、按需导入\n\n-   **按需导出**语法： `export let s1 = 10`\n\n-   **按需导入**语法： `import { s1 } from '模块标识符' `\n\n```javascript\n// 当前文件模块为 m1.js\n\n// 向外按需导出变量 s1\nexport let s1 = 'aaa';\n// 向外按需导出变量 s2\nexport let s2 = 'ccc';\n// 向外按需导出方法 say\nexport function say = function() {};\n```\n\n```javascript\n// 导入模块成员\nimport { s1, s2 as ss2, say } from './m1.js';\n\nconsole.log(s1); // 打印输出 aaa\nconsole.log(ss2); // 打印输出 ccc\nconsole.log(say); // 打印输出 [Function: say]\n```\n\n**注意**：每个模块中，可以使用**多次**按需导出\n\n### 3. 直接导入并执行模块代码\n\n有时候，我们只想**单纯执行某个模块中的代码**，并不需要得到模块中向外暴露的成员，此时，可以**直接导入并执行模块代码**\n\n```javascript\n// 当前文件模块为 m2.js\n\n// 在当前模块中执行一个 for 循环操作\nfor (let i = 0; i < 3; i++) {\n    console.log(i);\n}\n```\n\n```javascript\n// 直接导入并执行模块代码\nimport './m2.js';\n```\n\n\n",
      "date": 1609588339000,
      "post": true,
      "tags": ["模块化"],
      "title": "前端模块化相关规范",
      "titleEng": "module"
    },
    {
      "_id": "14139e12612e21ae0852140576ffa14b",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "JavaScript 常见问题",
      "content": "当执行 `JS` 代码时，会生成**执行环境**。\n\n如果代码写在函数中，会产生**函数执行环境**，否则就是在**全局执行环境**中。只有这两种执行环境。\n\n看下面一段代码：\n\n```javascript\nb(); // call b\nconsole.log(a); // undefined\n\nvar a = 'Hello world';\n\nfunction b() {\n    console.log('call b');\n}\n```\n\n这是因为函数和变量提升的原因，通常提升的解释是说将声明的代码移动到了顶部。\n\n但更准确的解释是，在生成**执行环境**时，会有两个阶段：\n\n第一个阶段是**创建**的阶段，`JS` 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间。若是函数，则将整个函数存入内存中。变量**只声明**并且赋值为 `undefined`。\n\n在第二个阶段，也就是**代码执行**阶段，我们可以直接提前使用。\n\n在提升的过程中，相同的函数会**覆盖上一个函数**，并且**函数优先于变量**提升：\n\n```javascript\nb(); // call b second\n\nfunction b() {\n    console.log('call b fist');\n}\n\nfunction b() {\n    console.log('call b second');\n}\nvar b = 'Hello world';\n```\n\n因为`var` 会产生很多错误，所以在`ES6`中引入了 `let`。`let`不能在声明前使用，但是这**并不是**常说的 `let` 不会提升。\n\n`let`**提升了**，在第一阶段内存也已经为他开辟好了空间，但是因为这个声明的特性导致了**并不能在声明前使用**。\n\n\n",
      "date": 1609231105000,
      "post": true,
      "tags": ["JavaScript"],
      "title": "JavaScript 中的变量提升",
      "titleEng": "variable-up"
    },
    {
      "_id": "14139e12612e1327084f0a7101c89111",
      "_openid": "9bf44da2dbb8473da1fcf4f591cb82ff",
      "classes": "JavaScript 手撕代码",
      "content": "## 1. 实现效果\n\n实现一个`sleep()`延迟函数，例如，`sleep(2000)`表示等待`2000`毫秒，再执行函数里面的操作。\n\n## 2. 实现过程\n\n利用`Promise`：\n\n```javascript\nconst sleep = time => {\n    return new Promise(resolve => setTimeout(resolve, time));\n};\n```\n\n## 3. 验证\n\n```javascript\nconsole.log(1);\n\nsleep(2000).then(() => {\n    console.log(2);\n});\n\nconsole.log(3);\n```\n\n![](https://img.lzxjack.top:99/20201220182046.gif)\n\n\n",
      "date": 1608459760000,
      "post": true,
      "tags": ["JavaScript"],
      "title": "JavaScript 实现一个sleep()延迟函数",
      "titleEng": "sleep"
    }
  ],
  "requestId": "d880c4377e116"
}
